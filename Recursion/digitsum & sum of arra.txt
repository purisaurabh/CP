// sum of array using recurssion 
#include <bits/stdc++.h>
using namespace std;
// sum(a,n) == sum of element in a uptill n index 
// sum(a,n) == a[n] + sum(n-1)

int sum(int n , int a[])
{
    if(n < 0)
    {
        return 0;
    }
    return sum(n-1 , a) + a[n];
}

int main()
{
    int n ;
    cin >> n ;
    int a[n];
    for (int i = 0; i < n; i++)
    {
        cin >> a[i] ;
    }

    cout << sum (2,a) << endl;
    
}

*/






















/*
// digitt sum 
// digit_sum(n) = digit_sum(n/10) + last_digit means n%10
// 1234 == 4 + digitsum(123)

#include<bits/stdc++.h>
using namespace std;

int digit_sum(int n )
{
    if(n==0)
    {
        return 0;
    }
    return digit_sum(n/10) + (n%10);
}

int main()
{
    int n ;
    cin >> n ;
    cout << digit_sum(n);
}

// complexity if given example == number of digit in n
// therefore time complexity of this example is logn to the base 10

