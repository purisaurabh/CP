You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [0]
Output: [1]
Explanation: The array represents the integer 0.
Incrementing by one gives 0 + 1 = 1.
Thus, the result should be [1].
Example 4:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].







Solution

#include <bits/stdc++.h>
using namespace std;

// function for adding one to number
void incrementVector(vector<int> &a)
{
    int n = a.size();

    // Add 1 to last digit and find carry
    a[n-1] += 1;
    int carry = a[n-1]/10;
    a[n-1] = a[n-1] % 10;

    // Traverse from second last digit
    for (int i=n-2; i>=0; i--)
    {
        if (carry == 1)
        {
           a[i] += 1;
           carry = a[i]/10;
           a[i] = a[i] % 10;
        }
    }

    // If carry is 1, we need to add
    // a 1 at the beginning of vector

    if (carry == 1)
    a.insert(a.begin(), 1);
}

// driver code
int main()
{
    int x;
    cin >> x;
    vector<int> v;
    for (int i = 0; i < x; ++i)
    {
        int p;
        cin >> p;
        v.push_back(p);
    }
    incrementVector(v);

    for (int i=0; i<v.size(); i++)
    {
        cout << v[i] << " ";
    }
   

    return 0;
}




class Solution {
public:
    vector<int> plusOne(vector<int>& digits) 
    {
              vector<int>ans;
        int carry=1;
        for(int i=digits.size()-1;i>=0;i--)
        {
            int s=(carry+digits[i]);
            ans.push_back(s%10);
            carry=s/10;
        }
        while(carry)
        {
            ans.push_back(carry%10);
            carry/=10;
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }

    
};